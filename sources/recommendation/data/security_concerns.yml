---
domains:
- title: Security architectural principles
  abbreviation: SAP
  controls:
  - id: SAP01
    name: The system architecture is able to log and detect
    abbrv:
    type: Security architectural principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    include_by:
    obsoleted_by:
    notes: |
      It is required that detection and logging capabilities are designed into the product/system security architecture.
      In this way, continuous learning and improvement could be supported.

      [EDITOR]
      ====
      This is a very good architecture consideration.

      Perhaps this should be split in detection and logging as 2 items.

      Is it a universal capability and should this stay in this Recommendation]
      ====

  - id: SAP02
    name: Ensure the system is scalable
    abbrv:
    type: Security architectural principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Scalability must be handled with great care.

      Scalability is a key property of security architecture.

      [EDITOR]
      ====
      This is an overall architecture characteristic.

      Shall it be defined here or elsewhere?

      In fact yes here as from Security perspective.

      It could be part of dependability, resiliency see <<b-DEPENDABILITY>>
      ====

  - id: SAP03
    name: Compartmentalize and de-couple whenever possible
    abbrv:
    type: Security architectural principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      To segment or modularize the system design, is sound advice.

      Likewise, to reduce coupling to the minimum is a sensible goal.

      [EDITOR]
      ====
      That could be a security design principle, but what makes it different with defense in depth?

      It could be micro-segmentation, or network design, etc.

      In fact it is different from defence in depth because this is not layered
      ====

- title: Security design principles
  abbreviation: SDP
  controls:
  - id: SDP01
    name: Vulnerable components are unacceptable
    abbrv:
    type: Security design principle
    definitions:
    descriptions: During security architecture design, it's required to either deprecate or refactor the vulnerable components of the product/system.
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      EDITOR: This is (too) obvious, perhaps this should be re-interpreted from a different point of view on classification regarding an overall safety approach which would allow to classify this principle in the paradigm 'removal' in the 4 paradigms: prevention, tolerance, removal, forecasting.

  - id: SDP02
    name: Defense in depth
    abbrv: N/A
    type: Security design principle
    definitions: |
      DEF01) Information security strategy integrating people, technology, and operations capabilities to establish variable barriers across multiple layers and missions of the organization.

      DEF02) The application of multiple countermeasures in a layered or stepwise manner to achieve security objectives. The methodology involves layering heterogeneous security technologies in the common attack vectors to ensure the attacks missed by one technology are caught by another one.
    descriptions: |
      Defense in depth is an approach in which a series of defensive mechanisms are layered in order to protect valuable data and information. This may be according to segmentation boundaries, etc. If one mechanism fails, the perpetrator must very soon face another security mechanism. This will make an attack more complex to conduct, and it will incur a greater cost in the attack. This will effectively make the attack less scalable and may even thwart the attack.
    sources: |
      CNSSI 4009-2015

      NIST SP 800-172

      NIST SP 800-172A

      NIST SP 800-30 Rev1 under Defense-in-Depth from CNSSI 4009

      NIST SP 800-39 under Defense-in-Depth from CNSSI 4009

      NIST SP 800-53 Rev.5 under defense in depth

      NISTIR 7622 under Defense-in-Depth

      NSTIR 8183 under Defense-in-depth from ISA/IEC 62443, ISO/IEC 62443 1-1

      NSTIR 8183 Rev.1 under Defense-in-depth from ISA/IEC 62443

      NSTIR 8183A Vol.2 under Defense-in-depth from ISO/IEC 62443 1-1

      NSTIR 8183A Vol.3 under Defense-in-depth from ISO/IEC 62443 1-1
    position:

  - id: SDP03
    name: Security coverage must be comprehensive and consistent
    abbrv:
    type: Security design principle
    definitions:
    descriptions: Security features of the product/system typically comprise identification and authentication schemes, security protection for data in transit and data at rest, and security schemes for authorization and access protection. These functionalities need to be there and be as consistent and comprehensive as possible.
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      EDITOR: this is indeed a security design principle but is it weak? The issue is that you can never be as complete as you want because of the 'capability/TCO/Risk appetite' curve

  - id: SDP04
    name: A threat modelling mindset must apply to security architecture design.
    abbrv:
    type: Security design principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Threat modelling is an activity normally associated with the design phase of a system, including security architecture design.

  - id: SDP05
    name: Zero Trust when considered a design security principle
    abbrv: ZT
    type: Security design principle
    definitions:
    descriptions: |
      Zero Trust is a security design principle and strategic approach that assumes no implicit trust is granted to assets or user accounts based solely on their physical or network location (i.e., local area networks vs. the internet) or based on asset ownership (enterprise or personally owned). Instead, Zero Trust requires verifying the identity of anything and everything trying to connect to its systems before granting access, regardless of where the request originates.

      Under the Zero Trust model, security is not determined by the perimeter of the network but is instead based on strict identity verification, device health checks, least-privilege access, and micro-segmentation to minimize lateral movement within networks. Access to resources is granted on a need-to-know basis, and transactions are securely authenticated and authorized within a segmented environment.
    sources: DEF01 NIST SP 800-207 Zero trust provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised.
    evolution: |
      2004 Jericho Forum introduces the principle of de-perimeterization.

      2009 Google establishes Beyond Corp.

      2010 Analyst John Kindervag introduces the "zero trust model" in a paper for Forrester Research.

      August 2020 NIST delivers NIST SP 800-207.

      Avril 2023 CISA delivers Zero Trust Maturity Model Version 2.0
    position:
    include: |
      EDITOR: Identify existing SDPs / Generate the missing SDPs from this
      list e.g. MFA, Encryption, Continuous Verification. Is SAP03 an SAP or
      an SDP?

      SDP14 (Continuous Verification)

      SDP07 (Principe of least-privilege):

      SDP11 (Micro-segmentation)

      SDP12 (MFASDP13 (Encrypt Data)
    included_by:
    obsoleted_by:
    notes: |
      [EDITOR]
      ====
      This SDP has a number of issues

      * The first document from Forrester from 2010 that initiated this SDP is not available online anymore
      * The only formal definition is coming from NIST
      * There is a discrepancy between the definition in the NIST text and the NIST data base (Zero trust provides vs Zero trust is). As the text is the reference it breaks ITU-T Authors guide B.3.2 as there is no 'class' for the object. Then the next part of the clause if very broad "a collection of concepts and ideas" and then the indirect definition by objective "designed to" is followed by a non MECE list of elements
      * It is considered to propose an alternative definition on the form: "Zero trust is a security design principle which is composed of the following list of security design principles <list to be agreed on> that goal is to minimize ..." where the <list to be agreed on> is a list of other SDPs in this Recommendation that are mutually exclusive though collectively exhaustive to form a MECE"
      ====

  - id: SDP06
    name: Minimize the attack surface area
    abbrv:
    type: Security design principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP07
    name: The principle of least privilege
    abbrv: PoLP
    type: Security design principle
    definitions: |
      DEF01 NIST 800-53 R5 AC-6 Control Statement: Employ the principle of least priviledge, allowing only authorized accesses for users (or processes acting on behalf of users) that are necessary to accomplish assigned organizational tasks.
    descriptions: |
      EDITOR: Users and devices are given the minimum access necessary to perform their duties, reducing the potential impact of a breach.

      It refers to the practice of limiting access rights for users (and systems) to the bare minimum necessary to perform their functions. This means that a user, program, or process should have only the privileges which are essential for its intended function, nothing more.

      Implementing the least privilege principle helps to reduce the attack surface of a system by limiting access to critical systems and data to only those entities that require it to perform their duties. This can significantly mitigate the potential damage from various security threats, such as malware infections or the actions of malicious actors. By ensuring that users and systems operate using the minimal set of privileges, organizations can better protect sensitive information and critical infrastructure from unauthorized access and exploitation.

      The principle of least privilege can be applied across various aspects of IT environments, including user permissions, software execution, system processes, and network access. It is often enforced through user account management processes, role-based access control (RBAC), access control lists (ACLs), and other security mechanisms designed to control access and privileges effectively.
    sources: |
      [EDITOR]
      ====
      To research into:

      ISO/IEC 27001 and in particular ISO/IEC 27001:2013 A.9

      NIS Special Publication 80-53

      ISO/IEC 15408 The Common Criteria for Information Technology Security Evaluation (CC)

      Payment Card Industry Data Security Standard (PCI/DSS)

      The Center for Internet Security (CIS) Controls

      Federal Information Processing Standards (FIPS)
      ====
    evolution: |
      The principle of least privilege (PoLP) is widely attributed to Jerome Saltzer and Michael D. Schroeder, who first articulated it in their seminal paper titled "The Protection of Information in Computer Systems," published in 1975 as part of the Proceedings of the IEEE, Vol. 63, No. 9. This paper laid out a set of design principles for securing information in computer systems, among which the principle of least privilege played a crucial role.

      Saltzer and Schroeder were part of the research community at MIT's Project MAC, which later became the MIT Computer Science and Artificial Intelligence Laboratory (CSAIL). Their work was foundational in the field of computer security, influencing not only academic research but also the practical design and implementation of secure computing systems.

      The principle of least privilege is one of several key principles they introduced, which also include concepts like economy of mechanism, fail-safe defaults, and separation of privilege. These principles have since become standard guidelines in the design and operation of secure systems.

      While the formal articulation of the principle dates back to Saltzer and Schroeder's 1975 paper, the underlying concept of minimizing access or privilege to what is necessary for a particular purpose has been a common practice in security-sensitive environments even before its formalization in the context of computer security.
    position:
    include:
    included_by: SDP05 (ZT)
    obsoleted_by:
    notes:

  - id: SDP08
    name: Separation of duties
    abbrv:
    type: Security design principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      EDITOR: Need to clarify relationship with Least privilege

  - id: SDP09
    name: Security by Design is the most cost-effective approach to security
    abbrv:
    type: Security design principle
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Security is vital for all critical infrastructures and should be designed into systems and operations from the beginning, rather than being applied after the systems have been implemented.

      [EDITOR]
      ====
      There is another definition earlier:

      Security by design is an approach in development that helps to focus on making a system as secure as possible already in the development process. It also helps to focus on best design practices.

      Where is it defined in a normative term

      It is not always feasible

      It is not the solution because of judge and party see CG-SECAPA discussion

      What's about security by implementation, migraton, etc.
      ====

  - id: SDP10
    name: Never trust, always verify
    abbrv:
    type: Security Design Principle
    definitions: The premise that trust is never granted implicitly but must be continually evaluated.
    descriptions: A restatement of the Zero Trust premise.
    sources: NIST SP 800-207
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP11
    name: Micro-segmentation
    abbrv:
    type: Security Design Principle
    definitions: |
      DEF01 NIST SP 800-215: Microsegmentation is a security design practice where an internal network (e.g., in the data center, cloud provider region) is divided into isolated segments so that the traffic in and out of each segment can be monitored and controlled.
    descriptions: Networks are divided into small, secure zones to maintain separate access for separate parts of the network. This limits an attacker's ability to move laterally across a network. The primary purpose of microsegmentation is to provide a degree of isolation to prevent attack escalation.
    sources: |
      NIST SP 800-215, 5.1
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP12
    name: Multi-Factor Authentication
    abbrv: MFA
    type: Security Design Principle
    definitions: |
      DEF01 NIST SP 800-63 Revision 3 Appendix A: Multi-Factor Authentication (MFA): An authentication system that requires more than one distinct authentication factor for successful authentication. Multi-factor authentication can be performed using a multi-factor authenticator or by a combination of authenticators that provide different factors.  The three authentication factors are something you know, something you have, and something you are.
    descriptions: The use of multiple verification methods to ensure that a user or device is granted access only after successfully presenting two or more pieces of evidence to an authentication mechanism.
    sources: NIST SP 800-63 Revision 3 Appendix A
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP13
    name: Encrypt data
    abbrv:
    type: Security Design Principle
    definitions:
    descriptions: Encrypting data at rest and in transit to protect the integrity and confidentiality of the data, even if a network is compromised.
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP14
    name: Continuous verification
    abbrv:
    type: Security Design Principle
    definitions:
    descriptions: Trust is never assumed and must be continually reassessed. Authentication and authorization are required for all users and devices seeking access to resources, regardless of their location.
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDP15
    name: De-perimeterization
    abbrv:
    type: Security Design Principle
    definitions:
    descriptions:
    sources: Jerico Forum
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

- title: Security design considerations
  abbreviation: SDC
  controls:
  - id: SDC01
    name: Robustness is a prerequisite for a security architecture
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      In a dynamic system, a state of robustness is not inherently stable and cannot be expected to last forever. However, it is still a necessary requirement that all components be robust. If a component of the product/system is weak, it's required to remedy the situation.

      EDITOR: Robustness is it a synonym for resiliency?

  - id: SDC02
    name: Threat landscape awareness is a prerequisite
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      In order to take appropriate countermeasure, it is important to know what kind of threats the system is likely to face. Therefore, it is required to conduct threat landscape investigations, which is a continual process.

  - id: SDC03
    name: Awareness of the Cyber Kill Chain is necessary
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Advanced persistent threat (APT) actors will tend to follow a certain set of steps to attack a system. These steps are called the "kill chain". Kill chain knowledge is no silver bullet but kill chain awareness is nevertheless very important.

      EDITOR: a very important pre-requisite and best practice

  - id: SDC04
    name: Fallback and backwards compatibility must be managed
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      In a dynamic system, it is required to manage fallback and backwards compatibility during the security architecture design.

      EDITOR: In practice even downgrading a workstation for whatever reason is close to impossible today! It is ideal but not always practical for many reasons including business reasons

  - id: SDC05
    name: Single point of failure must be avoided (and planned for)
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      With serious consideration of the drawbacks, a single point of failure could be avoided.

      EDITOR: This is part of Resiliency and redundancy architecture characteristic

  - id: SDC06
    name: All security functions [must][should] be upgradable, replaceable and updatable
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      All security functions will need to be upgradable and replaceable, which can pose a lot of challenges for security functionality.

      [EDITOR]
      ====
      What means replaceable? Vendor lock-in.

      Is it a security function or a solution.

      A security function is not upgradable by semantic]
      ====

  - id: SDC07
    name: There must be strong detection and response capabilities
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Reactive security measures are for the dynamic cases, and often for unexpected events. So, detection and response capabilities, including the full gauntlet of recovery and incident investigations, are necessary to be supported.

  - id: SDC08
    name: Plan for success and a long-term future
    abbrv:
    type: Security design consideration
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      The passage of time almost directly translates into change. And, invariably, any successful large-scale systems will be long lived. This literally translates into requirements to embrace change.

- title: Security design best practices
  abbreviation: SDB
  controls:
  - id: SDB01
    name: Failures provide invaluable information
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      To learn from failure is essential. Failures provide vital information about how the system actually works. To learn from security failures in other systems is also important.

  - id: SDB02
    name: System interfaces and exposure should be explicitly defined
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      Be explicit about intended exposure. To be explicit about intended exposure does not guarantee that the attack surface is well-contained, but it will at least indicate that the problem has been considered

  - id: SDB03
    name: Be explicit. Do not assume
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      A sound design is normally also a more secure design. A clean and transparent design will contribute towards this goal. However, it is under most conditions also an unattainable goal. Still, this is not the kind of goal that one expects to reach, it more a guideline for direction. One factor that contributes quite a lot is explicitness. Do not assume anything. If it is indeed important, then state it explicitly. This is sound advice for system designs at large, and even more so for security designs.

  - id: SDB04
    name: Known vulnerabilities should be prioritised and fixed accordingly, through different security and protection levels.
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      An attacker would need to exploit some kind of vulnerability in order to successfully carry out an attack. This is not to suggest that every vulnerability is equally important or need urgent attention. It simply means that all known vulnerabilities could be fixed through different security and protection levels. Sometimes it may suffice to reduce the exposure to provide an effective stopgap mitigation

      EDITOR: As there might be thousands of vulnerabilities, prioritisation is essential and the most severe/critical ones should be addressed.

  - id: SDB05
    name: Fail securely
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDB06
    name: Avoid security by obscurity
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDB07
    name: Keep security simple
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:

  - id: SDB08
    name: Asset clarification
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      EDITOR: change the title this is about Asset identification and classification

  - id: SDB09
    name: Establish secure defaults
    abbrv:
    type: Security design best practice
    definitions:
    descriptions:
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes: |
      EDITOR: massive difference between setting defaults in Vendor X products vs Vendor Y products

- title: Security design constraint
  abbreviation: SDX
  controls:
  - id: SDX01
    name: Juvenal
    abbrv:
    type: Security design constraint
    definitions:
    descriptions: |
      Despite the fact that security of some elements in the system can be proved, there is no definite way to measure and compare security of the whole system.

      This will be called the Juvenal security design constraint in reference to the famous quote: 'sed quis custodiet, ipsos custodet' which can be interpreted as 'who guards the guards'.

      This security design constraint represents a key 'glass roof' that may be pushed, may be deformed but doesn't seem to have any possibility to be pierced.
    sources:
    evolution:
    position:
    include:
    included_by:
    obsoleted_by:
    notes:
